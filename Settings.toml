# hfml_data_preprocessor settings file template.
#
#     Copyright (C) 2021 Pim van den Berg
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[project]
# What data to store. Reducing these steps will improve runtime speed.
# Possible values:
# - "raw"           : After extraction
# - "preprocessed"  : After preprocessing
# - "processed"     : After processing
output = ["raw", "preprocessed", "processed"]
# Multithreading toggle
# Recommended: true
threading = true

# Repeat this for each file you wish to process
[[project.files]]
# Raw data source file. Assumed to be in the HFML labview format
source = "file.013.dat"
# Output name. Choose something descriptive (sample, temperature, etc.)
dest = "measurement_013"

#
# HEADER RENAMING
#

# Renaming of columns
# Useful when processing data that has the same meaning but different labels or typo's
[rename]
"B(T)" = "B"
"Field" = "B"
"S1_Vxx_8_13_x" = "Vxx"
"S1_Vxy_9_13_x" = "Vxy"
"V_37_x" = "Vxy"
"V_68_x" = "Vxx"

#
# DATASET EXTRACTION
#

# Data sets to extract
# The name of each set is arbitrary: extract.<name>
# The x/y names should correspond to existing headers in the data file (after renaming).
[extract.Vxx]
x = "B"
y = "Vxx"

[extract.Vxy]
x = "B"
y = "Vxy"

#
# PREPROCESSING
#

[preprocessing]
# Optional: x inversion, i.e. x -> 1/x
invert_x = true
# Trim the x domain
# When inverting x, these values are automatically inverted as well for convenience.
trim_left = 12
trim_right = 32.95
# Optional: derivative
# Possible values: 0, 1, 2
# Note that linear interpolation will result in a C^0 function,
# such that the derivative will be garbage.
# The derivative amplifies noise.
# These are of no concern for the FFT.
derivative = 1

# Optional: multiplication of x/y with a constant.
# This happens _before_ trimming and inversion.
[preprocessing.prefactor]
x = 1
y = 1

# Optional: preprocessing interpolation.
# Interpolation happens as the last step in preprocessing.
[preprocessing.interpolation]
# Possible values: "linear", "steffen".
# Steffen splines are constrained cubic splines,
# with no oscillations between data points and a smooth first derivative.
algorithm = "linear"
# Interpolation amount
# Possible values:
# - "n"     : direct interpolation amount. E.g. "1000".
# - "2^n"   : same as "n" but a power of two.
# - "min"   : minimum x spacing of dataset.
# Recommended: "min"
n = "min"

#
# PROCESSING
#

# Optional: final processing step
[processing]
# Possible values:
# - "fft". This requires additional settings in processing.fft
kind = "fft"

# Only required if processing.kind = "fft"
[processing.fft]
# Remove DC component by subtracting the global mean
center = true
# Use CUDA FFT backend. Requires a modern NVIDIA GPU.
# This may result in a dramatic speedup of the FFT step for large lengths (see zero_pad).
# Recommended: true when your hardware supports it.
cuda = false
# Apply Hann window
hann = true
# Optional: frequency space truncation
# This has units of 1/x.
truncate_lower = 100
truncate_upper = 600
# Zero padded data length.
# Increasing this will result in a smoother spectrum with no data loss.
# NB. This length _includes_ the original data.
# Possible values:
# - "n"     : direct zero padding amount. E.g. "1000". NB. This _must_ be a power of two.
# - "2^n"   : same as "n" but a power of two.
# - "min"   : minimum required to reach the nearest power of two.
# Recommended: near "2^20".
zero_pad = "2^22"
