# hfml_data_preprocessor settings file template.
#
#     Copyright (C) 2021 Pim van den Berg
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[project]
# Project title
# All output data is stored in a folder with this name.
title = "Test"

# Optional: what data to output. Reducing these steps will improve runtime speed.
#
# Possible values:
# - "raw"               : After extraction
# - "preinterpolation"  : After preprocessing, before interpolation and inversion
# - "postinterpolation" : After preprocessing, after interpolation and inversion
# - "fft"               : After FFT
#
# Default: everything.
output = ["raw", "preinterpolation", "postinterpolation", "fft"]

# Use gnuplot for preliminary plotting.
# These plots should only be used for initial investigation and checks.
# NB. It seems that gnuplot may be broken on Windows.
#
# Disabling provides a massive speedup.
# Possible values: same as output.
#
# Recommended: at least "raw" and "preinterpolation", to inspect data.
# Default: everything.
gnuplot = ["raw", "preinterpolation", "postinterpolation", "fft"]

# Optional: multithreading toggle.
# This improves performance by using all CPU cores,
# but may make logs harder to read.
#
# Default: true
# Recommended: true
threading = true

# Project file listing
# Repeat this for each file you wish to process
[[project.files]]
# Raw data source file. Assumed to be in the HFML labview format
source = "file.013.dat"
# Output name. Choose something descriptive (sample, temperature, etc.)
dest = "measurement_013"

# Optional: mask bad data per file
# Masking is applied _after_ prefactor multiplication.
#
# Recommended: apply to a range of missing or invalid datapoints
# Default: no masking
masks = [
  {left = 12, right = 15},
]

# Optional: prefactor override
# This takes priority over the global prefactor
# and should be used to "patch" single files.
#
# Default: use global prefactor
prefactor_x = 1
prefactor_y = 1

#
# HEADER RENAMING
#

# Renaming of columns
# Useful when processing data that has the same meaning but different labels or typo's
# Duplicate headers are invalid and must be patched manually.
[rename]
"B(T)" = "B"
"Field" = "B"
"S1_Vxx_8_13_x" = "Vxx"
"S1_Vxy_9_13_x" = "Vxy"
"V_37_x" = "Vxy"
"V_68_x" = "Vxx"

#
# DATASET EXTRACTION
#

# The name of each dataset is arbitrary: extract.<name>
# This name is used for file outputs.
# The x/y names should correspond to existing headers in the data file (after renaming).

[extract.Vxx]
x = "B"
y = "Vxx"

[extract.Vxy]
x = "B"
y = "Vxy"

#
# PREPROCESSING
#

[preprocessing]
# Optional: x domain trimming
# Recommended to make sure every file has the same domain.
# This happens _after_ prefactor multiplication.
#
# Default: full domain.
trim_left = 12
trim_right = 32.95

# Optional: impulse filtering
# Value determines total impulse window width
# Setting to zero is equal to not defining.
#
# Default: no filtering.
impulse_filter = 0

# Optional: impulse tuning parameter.
# Tuning parameter indicates how far a point has to be,
# relative to the "average" window value, to be removed.
#
# Default: 1
impulse_tuning = 1

# Optional: multiplication of x/y with a constant.
# This happens _before_ trimming, masking and inversion (mostly important for negative factors).
#
# Default: 1.
prefactor_x = 1
prefactor_y = 1

# Optional: derivative
# Possible values: 0, 1, 2.
#
# Note that _linear_ interpolation will result in a C^0 function,
# such that the derivative will be garbage. The second derivative will be zero by definition.
#
# Note that the derivative massively amplifies noise.
# This is of no concern for the FFT.
#
# The first derivative may help removing a large low frequency peak from the FFT.
# This is especially helpful when using boxcar ("no") windowing.
#
# Recommended: 0 for raw data, 1 for FFT
# Default: 0
derivative = 0

# Optional: x inversion, i.e. x -> 1/x.
# Required for quantum oscillation FFT's, as the periodicity is in 1/B.
# This will make the data spacing nonuniform. See interpolation.
#
# Default: false
invert_x = true

# Optional: preprocessing interpolation.
# Interpolation happens as the last step in preprocessing.
# Recommended to enable when inverting x.
#
# Possible values: "linear", "steffen".
# Steffen splines are constrained cubic splines,
# with no oscillations between data points and a smooth first derivative.
#
# For FFT with fine interpolation, linear is fine.
# Steffen splines may be useful if you "underinterpolate" the data first.
#
# Default: no interpolation
interpolation = "linear"

# Interpolation amount
# Required if interpolation is defined.
#
# Possible values:
# - "n"     : direct interpolation amount. E.g. "1000".
# - "2^n"   : same as "n" but a power of two.
# - "min"   : minimum x spacing of dataset.
#
# Recommended: "min"
interpolation_n = "min"

#
# FFT
#

# Optional: FFT processing
[fft]
# Optional: remove DC component by subtracting the global mean
#
# Recommended: false
# Default: false
center = false

# Use CUDA FFT backend. Requires a modern NVIDIA GPU.
# This may result in a dramatic speedup of the FFT step for large lengths (see zero_pad).
# If no capable GPU is detected, an error is issued and the CPU is used instead.
#
# Recommended: true
# Default: true
cuda = false

# Optional: apply Hann window
#
# Recommended: true
# Default: true
hann = true

# Optional: frequency space truncation
# This has units of 1/x.
#
# Recommended: set some (high) upper bound,
# as the actual upper bound tends to be extremely high.
# Default: full spectral range
truncate_lower = 0
truncate_upper = 10000

# Zero padded data length.
# Increasing this will result in a smoother spectrum with no data loss.
# NB. This length _includes_ the original data.
#
# Possible values:
# - "n"     : direct zero padding amount. E.g. "1000". NB. This _must_ be a power of two.
# - "2^n"   : same as "n" but a power of two.
# - "min"   : minimum required to reach the nearest power of two.
#
# Recommended: near "2^20".
zero_pad = "2^22"
