# hfml_data_preprocessor settings file template.
#
#     Copyright (C) 2021 Pim van den Berg
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[project]
# Project title
# All output data is stored in a folder with this name.
title = "Test"

# Output preliminary plots for visual inspection.
# This applies to raw and preprocessed data.
#
# Default: true
plot = true

# Data format.
#
# Possible values:
# - "csv"           : Decimal representation in CSV format
# - "messagepack"   : MessagePack binary, containing two chained arrays: x and y.
#
# Recommended: "messagepack"
# Default: "messagepack"
format = "messagepack"

# Optional: multithreading toggle.
# This improves performance by using all CPU cores,
# but may make logs harder to read.
#
# Default: true
# Recommended: true
threading = true

#
# PREPROCESSING
#

# Global settings
# Operations are applied in the same order as the settings below.
[preprocessing.global]
# Optional: impulse filtering
# Value determines total impulse window width
# Setting to zero is equal to not defining.
#
# Default: no filtering.
impulse_filter = 0

# Optional: impulse tuning parameter.
# Tuning parameter indicates how far a point has to be,
# relative to the "average" window value, to be removed.
#
# Default: 1
impulse_tuning = 1

# TODO: Other (time domain) filtering, such as Savitsky-Golay.

# Optional: mask bad data
#
# Recommended: apply to a range of missing or invalid datapoints
# Default: no masking
masks = [
  {left = 12, right = 15},
]

# Optional: x domain trimming
# Recommended to make sure every file has the same domain.
# These values are interpreted in an absolute sense,
# i.e. fully negative domains work automagically.
#
# Default: full domain.
trim_left = 12
trim_right = 32.95

# Optional: multiplication of x/y with a constant.
#
# Default: 1.
prefactor_x = 1
prefactor_y = 1

# Optional: x inversion, i.e. x -> 1/x.
# Required for quantum oscillation FFT's, as the periodicity is in 1/B.
# This will make the data spacing nonuniform. See interpolation.
#
# Default: false
invert_x = true

#
# Local overrides
# When multiple of these are defined, the most specific one is used
# Parameters are inherited from least specific to most specific,
# in the order as defined below.
#

# Variable specific settings (all files)
[preprocessing.Vxx]
prefactor_x = -1

# File specific settings (all variables)
[preprocessing."dir1/measurement_013"]

# File and variable specific settings
[preprocessing."dir1/measurement_013".Vxx]

#
# PROCESSING
#

# Global settings
[processing.global]

# Optional: preprocessing interpolation.
# Interpolation happens as the last step in preprocessing.
# Recommended to enable when inverting x.
#
# Possible values: "linear", "steffen".
# Steffen splines are constrained cubic splines,
# with no oscillations between data points and a smooth first derivative.
#
# For FFT with fine interpolation, linear is fine.
# Steffen splines may be useful if you "underinterpolate" the data first.
#
# Default: no interpolation
interpolation = "linear"

# Interpolation amount
# Required if interpolation is defined.
#
# Possible values:
# - "n"         : direct interpolation amount. E.g. "1000".
# - "2^n"       : same as "n" but a power of two.
# - "minvar"    : minimum x spacing of data, uniform between files per variable
# - "min"       : minimum x spacing of data, uniform for entire project
#
# Recommended: "min"
interpolation_n = "min"

# Optional: derivative
# Possible values: 0, 1, 2.
#
# Note that _linear_ interpolation will result in a C^0 function,
# such that the derivative will be garbage. The second derivative will be zero by definition.
#
# Note that the derivative massively amplifies noise.
# This is of no concern for the FFT.
#
# The first derivative may help removing a large low frequency peak from the FFT.
# This is especially helpful when using boxcar ("no") windowing.
#
# Recommended: 0 for raw data, 1 for FFT
# Default: 0
derivative = 0

#
# Local overrides
# When multiple of these are defined, the most specific one is used
# Parameters are inherited from least specific to most specific,
# in the order as defined below.
#

# Variable specific settings (all files)
[processing.Vxx]

# File specific settings (all variables)
[processing."dir1/measurement_013"]

# File and variable specific settings
[processing."dir1/measurement_013".Vxx]
derivative = 1

#
# FFT
#

# Optional: FFT processing
[fft]
# Optional: subtract the mean from the data before applying the FFT.
#
# Recommended: true
# Default: true
center = true

# Use CUDA FFT backend (GPU FFT). Requires a modern NVIDIA GPU and CUDA libraries.
# This may result in a dramatic speedup of the FFT step for large lengths (see zero_pad).
# CUDA FFTs are batched together and processed in one operation. 
#
# If no capable GPU is detected, an error is issued and the CPU is used instead.
# If the CUDA shared libraries are not installed, the program may abort immediately.
#
# Recommended: true
# Default: true
cuda = true

# Optional: apply Hann window
#
# Recommended: true
# Default: true
hann = true

# Optional: frequency space truncation
# This has units of 1/x.
#
# Recommended: set some (high) upper bound,
# as the actual upper bound tends to be extremely high.
# Default: full spectral range
truncate_lower = 0
truncate_upper = 10000

# Zero padded data length.
# Increasing this will result in a smoother spectrum with no data loss.
# NB. This length _includes_ the original data.
#
# Possible values:
# - "n"     : direct zero padding amount. E.g. "1024". NB. This _must_ be a power of two.
# - "2^n"   : same as "n" but a power of two.
# - "min"   : minimum required to reach the nearest power of two.
#
# Recommended: near "2^20".
zero_pad = "2^22"

# Optional: FTFT (Finite Time Fourier Transform) "sweeps".
# Warning: this creates a lot of data!
#
# Creates FFTs of different time domain regions.
# Possible values:
# - "full"      : No sweeping, use full data range.
# - "lower"     : Sweep lower boundary, keep upper boundary fixed.
# - "upper"     : Sweep upper boundary, keep lower boundary fixed.
# - "windows"   : Moving window, with 50% overlap and a width defined below.
#
# Default: "full"
sweep = "upper"

# Sweep step amount.
# Required if sweep is set and not equal to "full".
# Must be more than 1.
#
# This divides the domain into n equal parts.
sweep_steps = 1

#
# FILES
#

# Repeat this for each file you wish to process
[[file]]
# Raw data source file. Assumed to be in the HFML labview format
source = "file.013.dat"
# Output name. Choose something descriptive (sample, temperature, etc.)
# This may contain sub directories
dest = "dir1/measurement_013"

#
# RENAMING
#

# Renaming of columns
# Useful when processing data that has the same meaning but different labels or typo's
# Duplicate headers are invalid and must be patched manually.
[rename]
"B(T)" = "B"
"Field" = "B"
"S1_Vxx_8_13_x" = "Vxx"
"S1_Vxy_9_13_x" = "Vxy"
"V_37_x" = "Vxy"
"V_68_x" = "Vxx"

#
# DATASET EXTRACTION
#

# The name of each dataset is arbitrary: extract.<name>
# This name is used for file outputs.
# The x/y names should correspond to existing headers in the data file (after renaming).

[extract.Vxx]
x = "B"
y = "Vxx"

[extract.Vxy]
x = "B"
y = "Vxy"
