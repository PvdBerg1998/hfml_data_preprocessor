# hfml_data_preprocessor settings file template.
#
#     Copyright (C) 2021 Pim van den Berg
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[project]
# Project title
title = "Test"
# What data to output. Reducing these steps will improve runtime speed.
# Possible values:
# - "raw"               : After extraction
# - "preinterpolation"  : After preprocessing, before interpolation
# - "postinterpolation" : After preprocessing, after interpolation
# - "processed"         : After processing
output = ["raw", "preinterpolation", "postinterpolation", "processed"]
# Use gnuplot for preliminary plotting.
# NB. It seems that gnuplot may be broken on Windows.
# These plots should only be used for initial investigation and checks.
# Disabling provides a massive speedup.
# Possible values: see output.
# Recommended: "raw"
gnuplot = ["raw", "preinterpolation", "postinterpolation", "processed"]
# Multithreading toggle
# Recommended: true
threading = true

# Repeat this for each file you wish to process
[[project.files]]
# Raw data source file. Assumed to be in the HFML labview format
source = "file.013.dat"
# Output name. Choose something descriptive (sample, temperature, etc.)
dest = "measurement_013"
# Optional: mask bad data per file
masks = [{left = 12, right = 15}]

#
# HEADER RENAMING
#

# Renaming of columns
# Useful when processing data that has the same meaning but different labels or typo's
[rename]
"B(T)" = "B"
"Field" = "B"
"S1_Vxx_8_13_x" = "Vxx"
"S1_Vxy_9_13_x" = "Vxy"
"V_37_x" = "Vxy"
"V_68_x" = "Vxx"

#
# DATASET EXTRACTION
#

# Data sets to extract
# The name of each set is arbitrary: extract.<name>
# The x/y names should correspond to existing headers in the data file (after renaming).
#[extract.Vxx]
#x = "B"
#y = "Vxx"

[extract.Vxy]
x = "B"
y = "Vxy"

#
# PREPROCESSING
#

[preprocessing]
# Optional: x inversion, i.e. x -> 1/x
invert_x = true
# Optional: x domain trimming
trim_left = 12
trim_right = 32.95
# Optional: derivative
# Possible values: 0, 1, 2
# Note that linear interpolation will result in a C^0 function,
# such that the derivative will be garbage.
# The second derivative will be zero by definition.
# Also note that the derivative massively amplifies noise.
# This is of no concern for the FFT.
# The first derivative may help removing a large low frequency peak from the FFT.
# This is especially helpful when using boxcar ("no") windowing.
# Recommended: 0 for raw, 1 for FFT
derivative = 0
# Optional: impulse filtering
# Value determines total impulse window width
# Setting to zero does nothing.
impulse_filter = 0
# Impulse tuning parameter relaxes impulse filter
# 0 results in a median filter, inf results in an identity filter.
impulse_tuning = 1

# Optional: multiplication of x/y with a constant.
# This happens _before_ trimming and inversion.
[preprocessing.prefactor]
x = 1
y = 1

# Optional: preprocessing interpolation.
# Interpolation happens as the last step in preprocessing.
[preprocessing.interpolation]
# Possible values: "linear", "steffen".
# Steffen splines are constrained cubic splines,
# with no oscillations between data points and a smooth first derivative.
# For FFT with fine interpolation, linear is fine.
# Steffen splines may be useful if you "underinterpolate" the data first.
algorithm = "linear"
# Interpolation amount
# Possible values:
# - "n"     : direct interpolation amount. E.g. "1000".
# - "2^n"   : same as "n" but a power of two.
# - "min"   : minimum x spacing of dataset.
# Recommended: "min"
n = "min"

#
# PROCESSING
#

# Optional: final processing step
[processing]
# Possible values:
# - "fft". This requires additional settings in processing.fft
kind = "fft"

# Only required if processing.kind = "fft"
[processing.fft]
# Remove DC component by subtracting the global mean
# Recommended: false
center = false
# Use CUDA FFT backend. Requires a modern NVIDIA GPU.
# This may result in a dramatic speedup of the FFT step for large lengths (see zero_pad).
# Recommended: true when your hardware supports it.
cuda = false
# Apply Hann window
hann = true
# Optional: frequency space truncation
# This has units of 1/x.
truncate_lower = 0
truncate_upper = 10000
# Zero padded data length.
# Increasing this will result in a smoother spectrum with no data loss.
# NB. This length _includes_ the original data.
# Possible values:
# - "n"     : direct zero padding amount. E.g. "1000". NB. This _must_ be a power of two.
# - "2^n"   : same as "n" but a power of two.
# - "min"   : minimum required to reach the nearest power of two.
# Recommended: near "2^20".
zero_pad = "2^22"
